2/3
Image File Formats
Compressed v. Uncompressed
    Compressed
	Smaller
    	Processing involved in viewing/generating a file
    	EX)
	    jpg/jpeg
	    webp
	    png
	    gif

    Uncompressed
        Raw image data
        EX)
	    bmp
	    tiff
	    raw

Lossy v. Lossless
    Lossy
        Loses some original information
        EX)
	    jpg
    Lossless
        Retains all original information
	EX)
	    bmp
	    tiff
	    png

    Run-Length Encoding
        12 B --> GGGGGYYYRRRR
        6  B --> 5G3Y4R

	6  B --> GYRYGR
	12 B --> 1G1Y1R1Y1G1R

Raster v. Vector
    Raster
        Represented as a grid of pixels
    Vector
        Represented as a list of drawing instructions


2/4
Netppm
    .ppm
    
    P3                         }
    XRES YRES MAX_COLOR_VALUE  } Header
    R G B R G B R G B......

    * All white space is equivalent.

    P3
    10 10 255
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0
    255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0

    Press ctrl-c ctrlc to switch from text to image in emacs

    display pic.ppm
    convert pic.ppm pic.png

2/5
Bresenham's Line Algorithm
y = m * x + b
y = (changeY/changeX) * x + b
(changeX) * y = (changeY) * x + (changeX) * b
0 = (changeY) * x - (changeX) * y + (changeX) * b

A = changeY
B = -changeX
C = changeX * b

0 = Ax + By + C

For now, limit lines to octant I. Therefore, 0 < m < 1.

f(x, y) = Ax + By + C

  0: (x, y) is on the line.
< 0: (x, y) is above the line.
> 0: (x, y) is below the line.

2 options:
1: (x + 1, y + 1)
2: (x + 1, y)
Check to see which magnitude is smaller.
DONT DO THIS - test the midpoint instead.
Midpoint -- if midpoint is above the line, draw the lower pixel
	    if midpoint is below the line, draw the higher pixel.
	    (x + 1, y + 1/2)

2/9

A = changeX
B = -changeX
C = changeX * b

f(x + 1, y + 1/2)
= 0 --> midpoint is on the line --> You can draw either pixel.
< 0 --> midpoint is above the line --> Draw the bottom pixel (x + 1, y)
> 0 --> midpoint is below the line --> Draw the upper pixel(x + 1, y + 1)

First Draft Algorithm
(x0, y0) --> (x1, y1)
x = x0, y = y0
while (x <= x1) {
  plot(x, y)
  delta = f(x + 1, y + 1/2) //You need to know A, B, and C
  if (d > 0) {
     y += 1;
  }
  x += 1;

Initial value of d:
d = (x0 + 1, y0 + 1/2)
d = A(x0 + 1) + B(y0 + 1/2) + C
d = Ax0 + A + By0 + B/2 + C
  = Ax0 + By0 + C + A + B/2
  = f(x0, y0) + A + B/2
  = 0 + A + B/2
  = A + B/2 --> Works because x0 y0 is used.

Second Draft Algorithm
(x0, y0) --> (x1, y1)
x = xn, y = yn
d = A + B/2
while (x <= x1) {
  plot(x, y)
  if (d > 0) {
     y += 1;
  }
  x += 1;
  d = f(x + 1, y + 1/2)

if d < 0			 
x -> x + 1, y -> y			 
f(x + 1, y)
d = A(x + 1) + By + C
d = Ax + A + By + C
d = Ax + By + C + A
d = f(x, y) + A
d = d + A because f(x, y) is previous d.

if d > 0
x -> x + 1, y -> y + 1			 
f(x + 1, y + 1)
d = A(x + 1) + B(y + 1) + C
d = Ax + A + By + B + C
d = Ax + By + C + A + B
d = f(x, y) + A + B
d = d + A + B because f(x, y) is previous d.

Third Draft Algorithm
(x0, y0) --> (x1, y1)
x = x0, y = y0
A = y1 - y0, B = -(x1 - x0)
d = A + B/2
while (x <= x1) {
  plot(x, y)
  if (d > 0) {
     y += 1;
     d += B;
  }
  x += 1;
  d += A;

2/10
 d = A + B
2d = 2A + B

Now, instead of d, use...
2d = 2d + 2A
2d = 2d + 2A + 2B

Final Algorithm
(x0, y0) --> (x1, y1)
x = x0, y = y0
A = y1 - y0, B = -(x1 - x0)
d = 2A + B
while (x <= x1) {
  plot(x, y)
  if (d > 0) {
     y += 1;
     d += 2B;
  }
  x += 1;
  d += 2A;

Octant 2:
Slope > 1
Now, new values will be either...
  (x, y + 1) or
  (x + 1, y + 1)

  Now, midpoint we want to check is (x + 1/2, y + 1).

  Initial d:
  d = (x0 + 1/2, y0 + 1)
  d = A(x0 + 1) + B(y0 + 1/2) + C
  d = Ax0 + A/2 + By0 + B + C
    = Ax0 + By0 + C + A + B
    = f(x0, y0) + A/2 + B
    = 0 + A/2 + B
    = A/2 + B --> Works because x0 y0 is used.
  2d = A + 2B

  If Ax + By + C = ...
  0, point on the line
  <0, point left of line
  >0, point right of line

  Final Algorithm
  (x0, y0) --> (x1, y1)
  x = x0, y = y0
  A = y1 - y0, B = -(x1 - x0)
  d = A + 2B  //midpoint is different
  while (y <= y1) { //change in Y will indicate reaching final point
    plot(x, y)
    if (d < 0) { //d < 0, point left of line, so draw line up and right.
      x += 1; //increment to go right
      d += 2A; //increment A instead of B
    }
    y += 1; //increment to go up
    d += 2B; //Increment B instead of A

For octant V, you can simply switch x0 and y0 and x1 and y1, and now
it is just like drawing in octant I. DO NOT SWITCH ONLY ONE, SWAP BOTH.

Octant VIII:
-1 < m < 0
Now, new values will be either...
  (x + 1, y) or
  (x + 1, y - 1)

2/22
Using Matrices:

  Point Matrix:
  [P0 P1 P2 P3 P4 P5 P6]

  while (i < points.length - 1) {
    draw_line(points[i], points[i + 1]);
    i++;
  }

  Not what we want.

  1. Shape Matrix:
     [[P0, P1, P2], [P3, P4, P5, P6]]
  
  2. [P0, P1, P2, P0, 0, P3, P4, P5, P6, P3, 0]

  ** 3. Edge Matrix:
       [P0, P1, P1, P2, P2, P0,...]

  4. Have 2 Matrices:
       Point Matrix:
       [P0, P1, P2, P3]
       Connection Matrix:
         0  1  2  3
       0 T  T  T  F
       1 T  T  T  F
       2 T  T  T  F
       3 F  F  F  T
  
  [P0, P1, P1, P2, P2, P0, P3, P4]

  [X0, X1, X1, X2, X2, X0, X3, X4]
  [Y0, Y1, Y1, Y2, Y2, Y0, Y3, Y4]
  [Z0, Z1, Z1, Z2, Z2, Z0, Z3, Z4]
  [ 1,  1,  1,  1,  1,  1,  1,  1]

  edges = new_matrix()
  add_edge(edges, P0, P1)
  ...
  draw_lines(edges)

2/23
Matrix Math
  Scalar Multiplication
  Matrix Multiplication
  Matrix Multiplication Identity

Scalar Multiplication
  S * [A B] = [SA SB]
      [C D] = {SC SD]

Matrix Multiplication
  M0 * M1 != M1 * M0
  Number of columns in M0 must equal the number of rows in M1
    A x B * B x C ==> inner numbers must be equal.
      	      	  ==> Outer numbers represent the result matrix size. (A x C)
		      A rows, C columns
		      
  [a b c] * [1] = [1a+2b+3c]
    1x3     [2]      1x1
    	    [3]
	    3x1

               0 1           0         1
  0 [a b c] * [1 4] = 0 [1a+2b+3c  4a+5b+6c] 
  1 [d e f]   [2 5]   1 [1d+2e+3f  4d+5e+6f]
  2 [g h i]   [3 6]   2 [1g+2h+3i  4g+5e+6i]
    3x3        3x2              3x2

Matrix Multiplicative Identity
  All diagonal values are 1, others are zero.
  Always square.

  [1 0 0 0] * [a]
  [0 1 0 0]   [b]
  [0 0 1 0]   [c]
  [0 0 0 1]   [d]
     4x4      4x1

Graphics Matrices
  Scaling
    (x, y, z) -------> (ax, by, cz)
    	      S(a,b,c)
	
    [a 0 0 0] * [x] = [ax]
    [0 b 0 0]   [y]   [by]
    [0 0 c 0]   [z]   [cz]
    [0 0 0 1]   [1]   [1 ]
       4x4      4x1   4x1

       4x4 * 4xN = 4xN ==> Keeps the same number of points.

2/24
Scaling
  (x, y, z) --------> (ax, by, cz)
      	    s(a,b,c)

     x y z
    [a 0 0 0] * [x] = [ax]
    [0 b 0 0]   [y]   [by]
    [0 0 c 0]   [z]   [cz]
    [0 0 0 1]   [1]   [1 ]
       4x4      4x1   4x1

       4x4 * 4xN = 4xN ==> Keeps the same number of points.

Translating
  (x, y, z) --------> (x + a, y + b, z + c)
      	    T(a,b,c)

    [1 0 0 a] * [x] = [x + a]
    [0 1 0 b]   [y]   [y + b]
    [0 0 1 c]   [z]   [z + c]
    [0 0 0 1]   [1]   [1]

Rotation
  (x, y, z) -------> (x cos (Θ) - y sin (Θ), y cos (Θ) + x sin (Θ), z)
      	    R(z, Θ)

  The axis you are turning around is fixed.

  Z axis rotation:
    x = r cos Φ  xr = r cos (Φ + Θ)
    y = r sin Θ       r cos (Φ) cos (Θ) - r sin (Φ) sin (Θ)
        	      x cos (Θ) - y sin (Θ)

    x = r cos Φ  yr = r sin (Φ + Θ)
    y = r sin Θ       r sin (Φ) cos (Θ) + r cos (Φ) sin (Θ)
        	      y cos (Θ) + x sin (Θ)

    [cosΘ -sinΘ 0   0] * [x] = [xcosΘ - ycosΘ]
    [sinΘ cosΘ  0   0]   [y]   [ycosΘ + xsinΘ]
    [0    0     1   0]   [z]   [z]
    [0    0     0   1]   [1]   [1]



2/25
  X axis rotation:
    (x, y, z) -------> (x, y cos (Θ) - z sin (Θ), z cos (Θ) + y sin (Θ))
    	      R(x, Θ)
  In this case, y is on the x axis, z is on the y axis

    [1	0      0    0] * [x] = [x]
    [0  cosΘ  -sinΘ 0]   [y]   [ycosΘ - zsinΘ]
    [0  sinΘ   cosΘ 0]   [z]   [zcosΘ + ysinΘ]
    [0  0      0    1]   [1]   [1]

  Y axis rotation:
    (x, y, z) -------> (x cos (Θ) - z sin (Θ), y , z cos (Θ) + x sin (Θ))
    	      R(Y, Θ)
  In this case, x is on the x axis, z is on the y axis

    [cosΘ 0     -sinΘ 0] * [x] = [xcosΘ - zsinΘ]
    [0    1      0    0]   [y]   [y]
    [sinΘ 0      cosΘ 0]   [z]   [xsinΘ + zcosΘ]
    [0    0      0    1]   [1]   [1]

Applying transformations:
  E0: Edge Matrix
  T: Translation Matrix
  S: Scale Matrix
  R: Rotation Matrix

  Affine transformation: Preserves the number of vertices and order of points.

  T * E0 --> You do this so you preserve the 4 x N edge matrix.

  T * E0 = E1 : Translated
  S * E1 = E2 : Translated --> Scaled
  R * E2 = E3 : Translated --> Scaled --> Rotated

  E3 = R * E2
       	   S * E1
	       T * E0
  E4 = R * S * T * E0 --> You can put this all in one line.

  Matrix Multiplication is associative but not commutative.
       A * (B * C) = (A * B) * C

  E4 = (R * S * T) * E0 --> By grouping the transformations together, you can create
       	      	     	    a "master transformation" matrix, then multiply it by
			    the edge matrix. You do this because E0 can be large.
			    *** E0 is translated, scaled, THEN rotated ***
			    *** Work from inside to out ***

  When resetting your transformation matrix, you set it to the identity matrix.


3/7
Parametric Equations
  x = f(t)
  y = g(t)

  EX) f(t) = t^2 + 2t + 2
      g(t) = 1 - t/(2^t)

    t: 0 --> 1

  Line: (x0, y0) --> (x1, y1)
  f(t) = x0 + t(deltaX)
  g(t) = y0 + t(deltaY)

  double x0, y0, x, y, t;
  x0 = param_x(0);
  y0 = param_y(0);

double param_x(double t) {
  return t * XRES;
}

double param_y(double t) {
  return 50 * sin(2 * M_PI * t) + 250;
}

  double step = 0.01

  for (t = step; t <= 1.0000001; t+= step) {
    x = param_x(t)
    y = param_y(t)
    add_edge(edges, x0, y0, 0, x, y, 0);
    x0 = x;
    y0 = y;
  }

  color c;
  c.red = 255;
  c.blue = 255;
  c.green = 0;
  clear_screen(s);
  draw_lines(edges, s, c);
  display(screen);
}

Circle:
  x = rcos(t) + cx
  y = rsin(t) + cy

double param_x(double t) {
  return 100 * cos(2 * M_PI * t) + 250;
}

double param_y(double t) {
  return 100 * sin(2 * M_PI * t) + 250;
}

by changing the step, you will make different regular polygons.
  
3/8
Spline

Hermite Curve Inputs:
P0, P1: Endputs
R0, R1: Rates of change at each endpoint

All we care about in graphics is creating cubic curves. In order to create
higher order curves, just join two splines together.

Hermite Curves:
  fx(t) = at^3 + bt^2 + ct + d: Points on the curve.
    You need to do this another time for y component.

  f'(t) = 3at^2 + 2bt + c: Rates of change.

  When t = 0
    f(t) = d  : P0
    f'(t) = c : R0

  When t = 1
    f(t) = a + b + c + d : P1
    f'(t) = 3a + 2b + c  : R1

3/9
Hermite Curves
Inputs: P0, P1\
	       ---> at^3 + bt^2 + ct + d
	R0, R1/


   [0  0  0  1]   [a]    [d]                [P0]
   [1  1  1  1]   [b]    [a + b + c + d]    [P1]
   [0  0  1  0] * [c]  = [c]             =  [R0]
   [3  2  1  0]   [d]    [3a + 2b + c]      [R1]  
        H          C        Given           Given

H * C = G

H^-1 * H * C = H^-1 * G
           C = H^-1 * G

 [2  -2   1  1] * [P0] = [a]
 [-3  3  -2  1]   [P1]   [b]
 [0   0   1  0]   [R0]   [c]
 [1   0   0  0]   [R1]   [d]

REMEMBER: You have to do this twice for both X and Y axes.

Bezier Curves
Inputs: P0, P3: Endpoints
	P1, P2: Not on curve.

   P1 	    	    P2
    *               *
     \		     \
      \  	      \
       \	       \
        *               *
	P0		P3  (curve goes from P0 to P3)

Linear BC
P(t) = (1 - t) * P0 + t * P1
                ----* P1  (curve goes from P0 to P1)
          ------
     -----
    *
    P0
    
Quadratic BC
        P1
        *
      /   \	
     /     \
    /	    \
   /	     \
  /	      \
 *	       *
P0		P2 (wiki Bezier Curve)

3/10
Bezier Curves
at^3 + bt^2 + ct + d

Linear:
P(t) = (1 - t) * P0 + t * P1

Quadratic
Quadratic BC
        P1
        /*\
       /   \	
      /     \
     / _____-\*R1
 R0*/--       \
   /	       \
  *	        *
 P0		P2 (wiki Bezier Curve)

R(t) = (1 - t) * R0 + t * R1
R0(t) = (1 - t) * P0 + t * P1
R1(t) = (1 - t) * P1 + t * P2

R(t) = (1 - t) *           R0       +      t      *     R1
R(t) = (1 - t) * [(1 - t) * P0 + t * P1] + t * [(1 - t) * P1 + t * P2]
     = (1 - t)^2 * P0 + t * (1 - P) + t * (1 - P) + t^2 * P2
R(t) = (1 - t)^2 * P0 + 2 * t * (1 - t) * P1 + t^2 * P2

Cubic
 --> For Gif, look on wiki for Bezier Curve

Q(t) = (1 - t) * Q0 + t * Q1
Q(t) = (1 - t) * [(1 - t)^2 * P0 + 2 * t * (1 - t) * P1 + t^2 * P2] +
             t * [(1 - t)^2 * P1 + 2 * t * (1 - t) * P2 + t^2 * P3]
Q(t) = (1 - t)^3 * P0 + 2 * t * (1 - t) ^2 P1 + t^2 * (1 - t) * P2 + t * (1 - t)^2 P1 + 2t^2(1 - t) * P3 + t^3 * P3
Q(t) = (1 - t)^3 * P0 + 3 * t * (1 - t) ^2 P1 + 3t^2(1 - t) * P2 + t^3 * P3


3/11

p0p1p2p3->
R(t) =(1-t)Q0 +tQ1
     =(1-T)^2p0 +3T(1-t)^2P1+3t^2(1-t)P2+T^3P3


a is (-p0+3P1 -3P2 +P3)t^2
b is (3P0-6P1+3P2)t^2
c is (-3P0+3P1)t
d is P0


[-1 3 -3 1]    [p0]    [a][ (-p0+3P1 -3P2 +P3)t^2]
[3 -6  3 0]    [p1] == [b][(3P0-6P1+3P2)t^2]
[-3 3 0 0]    [p2]    [c][ (-3P0+3P1)t]
[1  0  0 0]    [p3]    [d][P0]

3/14
at^3 + bt^2 + ct + d

x0 = shape_x(0)
y0 = shape_y(0)

for t: 0.1 --> 1
  x = shape_x(t)
  y = shape_y(t)
  add_edge (x0, y0, x, y, edges)
  x0 = x
  y0 = y

3/21
3D Shapes:
  Box
  Sphere
  Torus
  Bezier/Hermite Surfaces

  Box:
    8 vertices
    Inputs: width, height, depth
     	    x, y, z
    Use the upper left front corner as starting point.
    Simply add and subtract to get the desired result.

  Sphere
    Draw points on the sphere, connect latitudes and longitudes.
    Rotate the circle, points along circumference will carve out a sphere.
3/22
3D Shapes

  Sphere:

    [1	0      0    0] * [r cos Θ] = [x]
    [0  cosΦ  -sinΦ 0]   [r sin Θ]   [rsinΘ * cosΦ]
    [0  sinΦ   cosΦ 0]   [0]         [rsinΘ * sinΦ]
    [0  0      0    1]   [1]         [1]

    Θ : angle of circle creation
    Φ : angle of circle rotation

    Full circle:
    if Θ: 0 --> 2 * pi
       Φ: 0 --> pi

    Semicircle:
    if Θ: 0 --> pi
       Φ: 0 --> 2 * pi
    
    Pseudocode:
    for p : 0 --> 1
	for t: 0 --> 1
    	    x = r * cos(M_PI * t) + cx;
	    y = r * sin(M_PI * t) * cos(2 * M_PI * p) + cy;
	    z = r * sin(M_PI * t) * sin(2 * M_PI * p) + cz;

    You can call the inner "t" circle and outer "p" rotation to understand what you
    are doing.

  Torus:

    r = radius of circle
    R = Distance from center of torus and center of circle.

    [1	0      0    0] * [r cos Θ]     = [x]
    [0  cosΦ  -sinΦ 0]   [r sin Θ + R]   [rsinΘ * cosΦ + R]
    [0  sinΦ   cosΦ 0]   [0]             [rsinΘ * sinΦ + R]
    [0  0      0    1]   [1]             [1]
    
    r is half the thickness of the torus.

    In this case, phi and theta must go from 0 to 2 * pi


3/29
Wireframe / Polygon Meshes

Wireframe:
  * 3D objects are defined as the edges that connect the vertices/points.
  * Works well with the existing edge matrix framework.

Polygon Mesh:
  * 3D objects are defined as the surfaces (triangles or quadrilaterals) that cover
    the object.
  * Move from edge matrix to polygon matrix.
  * Allow us to make solid objects.
  * Allow us to remove backfaces.

Polygon Matrix:

  P0	     P3  TM: [(P0, P1, P2), (P2, P3, P0), ... ]
    *-------*	 For each polygon, draw:
    |	    |	   P0 P1
    |	    |	   P1 P2
    |	    |	   P2 P0
    *-------*
  P1	     P2

Edge Matrix:	Polygon Matrix:
   Plot	-----------> Plot
 draw_line ------> draw_line
 draw_lines ---> draw_polygons *
 add_point ------> add_point
 add_edge ------->add_polygon *

In add_polygon, points must be added in counterclockwise order.


3/30
Polygon Meshes

Box:

//Front
P0, P1, P2
P2, P3, P0

//Back:
P7, P5, P4
P7, P6, P5

Sphere:
Sphere going from 0 to 20, clockwise. Rotate inwards

Zoom into square 1, 2, 12, 11

Generating triangles (Not for edge cases)
1, 2, 12 --> i, i + 1, i + n + 1
1, 12, 11 --> i, i + n + 1, i + n

Using Semicircle going from 0 to 20

4/5
Backface Culling
* The process of rendering only the surfaces that are facing forward.
* The surface normal (-->) shows the direction a surface is facing.
		     ( N )
* The view vector/camera (-->) shows the direction of the observer.
			 ( V )

  Theta is the angle between N and V.
    90 < Theta < 270

Algorithm
  1. Calculate N.
  2. Find theta between N and V.
  3. If 90 < Theta < 270, draw the polygon.
     NOTE: Test out both inclusive and exclusive.

1. Calculate N
  * Cross product of two vectors that share a common endpoint and go in different
    directions. ONLY WORKS IF POINTS WERE ADDED COUNTERCLOCKWISE.

    P0, P1, and P2.
    Vector A between P0 and P1
    Vector B between P0 and P2

    Vector A = P1 - P0
    	     = <x1 - x0, y1 - y0, z1 - z0>
	       	   x 	    y 	     z
    Vector B = P2 - P0
    	     = <x2 - x0, y2 - y0, z2 - z0>

    -->	  -->   
     A  X  B = <Ay * Bz - Az * By,
     	        Az * Bx - Ax * Bz,
	        Ax * By - Ay * Bx>

          -->
	   N = <Nx, Ny, Nz>


4/6
2. Find Theta between N and V.
  -->
   V = <0, 0, -1> --> For a head on view of the object.

  --> -->
   N . V = N * V * cos(theta)

   cos < 0 if 90 < theta < 270.

   If Nx * Vx + Ny * Vy + Nz * Vz > 0, don't draw.
   If Nx * Vx + Ny * Vy + Nz * Vz > 0, draw.


4/12
Relative Coordinate System:
* Currently, we use a global coordinate system - each object is drawn with respect
  to the same origin/coordinate system.
* In a relative coordinate system, each object can have its own origin/coordinate
  system.
* We will use a stack to store the various coordinate systems.

  P -> [1 0 0 3] -> P (x + 3, y + 2)
       [0 1 0 2]
       [0 0 1 0]
       [0 0 0 1]

Graphics Framework:
A. Transformations are applied to the top of the stack.
B. The stack will be pushed and popped as needed.
C. Drawing pipeline:
   1. Generate points.
   2. Multiply the points by the stack top.
   3. Draw the object to the screen.
   4. Clear the point matrix.

4/13

Push --> Push a copy of the top of the stack to the stack.

Making a robot with head, torso, left arm.

   Command   | 	 Stack	     |      Image
------------------------------------------------------ 
    Push     |   Identity    | Origin at bottom left
	     |   Identity    |
------------------------------------------------------
  Translate  |   T0 * I      | Origin at center 
    X Y Z    |      I        |
------------------------------------------------------
     Box     |   T0 * I      | Box at center
 X Y Z w h d |      I 	     |
------------------------------------------------------
    Push     |   T0 * I      | Push T0 * I 
    	     |	 T0 * I	     |
	     |      I	     |
------------------------------------------------------
  Translate  |   T1 * T0 * I | Origin moved by X Y Z
    X Y Z    |   T0 * I      | from center.
      	     |	    I 	     |
------------------------------------------------------
   Sphere    |   T1 * T0 * I | Sphere at new origin
   X Y Z r   |	 T0 * I	     |
       	     | 	    I	     |
------------------------------------------------------
    Pop	     |   T0 * I      | Origin back at center of torso
    	     |	    I 	     |
------------------------------------------------------
   Push      |	 T0 * I	     | Push T0 * I
   	     |	 T0 * I	     |
	     |	    I 	     |
------------------------------------------------------
 Translate   |	 T2 * T0 * I | Origin now at upper right corner of torso 
 	     |   T0 * I	     |
	     | 	    I 	     |
------------------------------------------------------
    Box	     |	 T2 * T0 * I | Box at new origin
 X Y Z w h d |	 T0 * I	     |
       	     |	    I 	     |


If not connected, pop the identity off the stack
If connected, keep drawing.
If connected but also has independent motion, push to the stack.

Stack is used in order to differentiate dependent/independent motion.


4/19
Compilers

Source Code --> Compiler --> Machine Code


1. Lexer --> 2. Parser --> 3. Semantic Analyzer --> 4. Optimizer -->
5. Code Generator

3 Steps:
1. What is the input?
2. What does it need to know about the language?
3. What is the output?

Lexer
  Performs lexica analysis.
  Knows all the valid tokens in the language.
  Generates a list of tokens based on the source code.
  Doesn't care about structure, only checks to see if there are invalid tokens, such
  as non-ascii chars, @, etc.

EX)
int main() {		    int
  long x = 5 + 6;  ---->    IDENT main
  printf("hi");	   	    (
  return x;		    )
} 	 		    {
			    long
			    IDENT x
			    =
			    5
			    +
			    6
			    ;

Parser
  Performs syntax analysis.
  Knows the grammar of the language.
  Generates a syntax tree.

	      int main
	 --------------------	 
	|         |	     |
	=       printf	   return
    ---------     |	     |
   |	     |	 "hi"	     x
long x	     +
     	    / \
     	   5   6

4/20
Semantic Analyzer
  Knows how to identify variables and values.
  Knows what tokens map to computer operations. 
  Generates:
    1) Symbol Table
    2) List of operations in the order they must be performed.

  Symbol Table

  main	  function     int
  x	  	       long
  printf  function     int


  Operations List
  +:       5, 6 <-------------------------------
						|
  =: 	   x (links to the symbol table), *reference to previous*
  printf:  (reference to symbol table)
  return:  x (links to the symbol table)

Optimizer
  Does things better. Can eliminate unused variables / rewrite patterns it notices.

Code Generator
  Inputs are symbol table and operations list.
  Knows what operations map to what processor instructions.
  Generates the program machine code.


4/21
We will be using:

    flex (lexer) (open source version of lex)
    bison (parser) (open source version of yacc - yet another compiler compiler)

mdl (motion description language): describes the grammar of language

 

Compiler generates an image file given a .mdl file describing the image.

5/3
Frames <#>

    set  the # of frames

Basename <name>

    set prefix for all frame filenames

Vary <knob> <frame start> <frame end> <start value> <end value>

    describes how the knob changes over time
    knobs are added at the end of a transformation to be animated

Beginning with animation, consider the following scenario:

I want to move a ball from the left hand side of the screen to the right hand side

It would be nice if each frame only did a percentage of the transformation as
follows:

Frame | Command | Variables…

0  move  400  0  0  0%

1  move  400  0  0  25%

2  move  400  0  0  50%

3  move  400  0  0  75%

4  move  400  0  0  100%

 

Well how might one accomplish this without writing multiple script files for each frame of the animation?

We can do this by implementing a new variable, the knob. The knob will replace the percentage of the transformation seen above:

move 400 0 0 <knob name>
 
We can then modify the knob by the new command, vary.

Vary <knob name> <starting frame> <ending frame> <starting value [0,1]> <ending value [0,1]>

Also, each frame name will generated from a new command, basename

Basename <name>

This results in the following format:

Filename: <basename>0<frame #>.png

The total number of frames is determined by the command frames:

Frames <#>


5/4
Animation
  Pass I:
    Look for and verify the animation commands.
      * Frames, basename, vary.
    If there are any errors, display message and exit.
    Set the number of frames.
    Set the basename.
      * If basename is not in the mdl file, set a default one and alert the user.

  Pass II:
    Generate and store the knob values.
    Create an array/list where each index represents a frame, and stores a list of
    knob values for that frame.

  Example
    vary  k  0  10  0  1
    vary  x  3  6   1  0

    frame 
      0  --> k:   0 --> x: 1  
      1  --> k: 0.1 --> x: 1
      2  --> k: 0.2 --> x: 1
      3  --> k: 0.3 --> x: 1
      4  --> k: 0.4 --> x: 0.6666...
      5  --> k: 0.5 --> x: 0.3333...
      6  --> k: 0.6 --> x: 0 
      7  --> k: 0.7 --> x: 0
      8  --> k: 0.8 --> x: 0
      9  --> k: 0.9 --> x: 0
      10 --> k: 1.0 --> x: 0

  Pass III:
    Drawing phase
    If there is no animation code, draw the image.
    If there is animation code, for each frame:
      1. Set symbol table values for each knob based on the array from pass II.
      2. Go through the drawing commands and apply the knobs as needed.
      3. Save the image as basename + frame #
   
5/12
Scanline Conversion
  Filling in a polygon by drawing a series of horizontal or vertical lines.

  Triangle with horizontal lines filling it in.

  (x0, y0) (x1, y1)

  We need to know which point is the top, middle, and bottom.
  Ignore cases where middle is same as either top or bottom.
  * (x0, y0) are always on the line BT
  * (x1, y1) is on the line BM or MT.
  * y0 and y1 are always going to be equal.

  1st line: line BB (xB, yB) --> (xB, yB)
  2nd line: line    (xB + delta(0), yB + 1) --> (xB + delta(1), yB + 1)

  delta(0)? Line BT
  m(x - xB) = (y - yB)
  m = (yT - yB) / (xT - xB)
  Therefore
  (yT - yB) / (xT - xB) * (x - xB) = (y - yB)

  x = xB + (xT - xB) / (yT - yB) * (y - yB)
  (y - yB) = 1
  x = xB + (xT - xB) / (yT - yB)
  delta(0) = (xT - xB) / (yT - yB)

  delta(1) = (xM - xB) / (yM - yB)
  	     If y > yM,
  	     (xT - xM) / (yT - yM)
	   
5/13
Final Project:
All start off at mdl-animation.
Final project will be us adding to that.
You can add scanline conversion, lighting and shading.
MDL.spec --> includes all commands and what they should do.
	 --> mesh --> a way to load an external 3d mesh.
	     	  --> google sketchup
		  --> already made mesh file

	 --> tween --> different way of describing animation.
	     	   --> morphing animation

You can also add new features in mdl.
  EX) generating pyramids, regular shapes, etc.
      Non-linear knobs --> add an optional variable to vary to change.

Scanline Conversion:
  What if we have division by 0?
  EX) If yM = yB or yM = yT
  if y > yM will take care of this.


5/18
Screen
      G G G
    Y G G G
    Y G G G  <-- This is not what we want
    Y Y

We need Z values per pixel.
We can use a different container for Z values.

     screen  	        z-buffer
    (r, g, b)           (double)
 
  B B B G G G              7  7  7
y B B Y Y G G     y    23 23  7  7
  B B Y Y G G	       23 23  7  7
  B B Y Y B B	       23 23
  B B B B B B
       x                 x

Z-Buffering
* Store the z values for each pixel in a z buffer.
* When you plot a point, you check its z-coordinate against the z buffer.
  * If z-cor is greater, update the z buffer and pixels.
  * If z-cor is smaller, do nothing.
* The z-buffer should be initialized to the smallest possible value.
* You must calculate the z values for each pixel.

plot(x, y, screen, color) --> plot(x, y, z, screen, color, z-buffer);
Plot should now check if x and y are in bounds and z-cor is greater than current
z-buffer value at coord x, y, then update the screen.

We need to update the header file so that plot takes these new parameters.
Since the only thing that calls plot is draw_line, we need to update
draw_line --> draw_polygons, scanline_convert

Create a z-buffer table or modify point structure table.
Update these functions so they take these parameters.
THEN implement the z-buffer.

OR

Instead of modifying functions, make new copies of them.

	   * (x1, y1, z1)
          /
        /
      / 
    /
   *
(x0, y0, z0)

delta(z) / x-y distance --> calculating z coords.

Don't use sphere and torus while testing, to start.


5/23
Modeling Real World Lighting

2 parts to each color:
  1. The reflective properties of the object.
  2. Color and intensity of the light.

Lighting Equation:
  * Goal is to calculate a color value (0 - 255) for each polygon (or pixel)
  * To generate grayscale images, you need to compute the color once per polygon.
  * To generate a color image, you need to compute separate red, green, and blue
    values for each polygon.

  I (illumination)
  
  I = I ambient + I diffuse + I specular
      		  |____________________| 
    		   Based on Light Source

  Different light sources and types of reflection
    2 types of light sources
      1. Ambient light
        * Background Lighting
	* Hits all surfaces equally
      2. Point Light Sources
        * Light from a particular location with a particular direction.
	* Reflections are based on the relative location of the surface with respect
	  to the light.

    I Ambient
      * Combination of the color of the ambient light and the amount of ambient
      	reflection for the surface.
      * Comes equally from all directions.

    I Diffuse
      * Reflection of a point source where the light is reflected back evenly in all
      	directions.


5/24
Lighting Equation
  I = I ambient + I diffuse + I specular
  
    I Ambient
      * Combination of the color of the ambient light and the amount of ambient
      	reflection for the surface.
      * Comes equally from all directions.

    I Diffuse
      * Reflection of a point source where the light is reflected back evenly in all
      	directions.

    I Specular
      * Light comes from a specific point.
      * Reflected in a specific direction.

     Reflective properties     |      Quality of light
--------------------------------------------------------------
Represented as a percentage of |  Ambient
the light that is reflected    |    * Represented by a color value (0 - 255).
back. (constants)   	       |  Point Light Sources
			       |    * Represented by a color value and the location
Ka, Kd, Ks		       |      of the light.
    			       |
Ka + Kd + Ks = 1	       |


5/26
Lighting Equation
  I = I ambient + I diffuse + I specular

  Ambient Light
    Ca = ambient color
    Ka = constant of ambient reflection
  
    I ambient = Ca * Ka

Diffuse Reflection
  Light goes in all directions
    Cp = point light source color
    Kd = constant of diffuse reflection
     Θ = angle between surface normal and surface

  I diffuse = Cp * Kd * cos(Θ)

  If cos(Θ) < 0, set it to 0. (Ternary operator)
                  ->    ->
  We need to turn L and N into unit vectors (normalized)
  ^
  L = (Lx/|Lx|, Ly/|Ly|, Lz/|Lz|)

      		         ^     ^
  I diffuse = Cp * Kd * |L| * |N|

Specular reflection
  Light goes in one direction
    Cp = point light source coloe
    Ks = constant of specular reflection

    The view vector is now relevant. Angle between view vector and reflected ray is
    alpha

  I specular = Cp * Ka * cos(alpha) 
