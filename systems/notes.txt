9/11 - Aim: C what I did there?
Do Now:
From Yesterday:
     4) Figure out what gcc does
     	man gcc
     5) Copy woohoo.c from your home directory to a /code/ directory on homer
        scp woohoo.c jason.shin@homer.stuy.edu:/code
	     ^source      ^destination          ^remote directory
	*Colon is necessary. If you leave out path, file goes to home directory
	*Remote to remote or Remote to current also work

Today:
     List all the Java primitive variable types
     int      32 bit integer
     float    floating point
     boolean  True/False
     char     character
     short    16 bit integer
     double   64 bit floating point
     long     64 bit integer
     byte     8 bit integer
     *bool and byte are not in C

     Last Class Today:
     	  1 student chosen at random everyday. That evening, the person will be
	  responsible for posting notes to Piazza page. Tag the note as "last 
	  class today".
	  	Title the note LCT <MM/DD WEEKDAY>
		For example, LCT 9/10 Thursday

		Also include at the end of the note a link to an interesting 
		piece of tech news.

9/12 - Aim: Variables are the spice of life.
Do Now: What is the smallest variable type that could be used to store the
   following values (using standard sizes)?
   byte (8-bit): 
   	-128 to 127 (or 2^7 to 2^7 - 1)
   short (16-bit):
   	-2^15 to 2^15 - 1
   int (16-bit):
        -2^31 to 2^31 - 1
   long (64-bit):
   	-2^63 to 2^63 - 1
   1) 5 --> byte
   2) -30,000 --> short
   3) 255 --> short
   4) 5,000,000,000 --> long

C Primitive Variable Types
   All C primitives are numeric.
   The only difference is floating point vs. integer and size of variable.
   Size can be platform dependent.
   	sizeof(<TYPE>) can be used to find the size in bytes.
	ex. sizeof(int)
   
   Type		Standard Size (in bytes)
   int		4
   short	2
   long		8
   float	4
   double 	8
   char		1

   All boolean values are numbers
       0 ==> false
       anything else ==> true
       YOU WILL ALL MAKE THIS MISTAKE:
       	   if (x = 6) {...}
       *The assignment value will return the value you are assigning.

9/17
Aim: Always read the fine print.
Do Now: Open up your editor of choice (emacs)
   	Write a basic "Hello World" program in java.

Data Types and Variables
     
     Character literals are single characters inside ''
     	  ex. 'a', '*' ...
     
     String literals exists, even though there is no String data type.
     	  ex. "hello", "you smell"
     
     Variables cannot be declared inside for loops statements, but they can be
     initialized.
     
     Any variable type can be declared an "unsigned" variable
     This signifies the variable will never be negative.
     	  The lower bound of of any unsigned variable is 0
	  The upper bound will be greater than the signed version
	  ex. unsigned char x;
	      0 <= x <= 255

     int main() {    --> You don't need the arguments in main
     	 return 0;   --> Return 0 if everything went ok
     }

     gcc hello.c     --> Generates a program called a.out
     ./a.out	     --> You need the ./ to run it
     gcc hello.c -o greeter
     ./greeter

9/18 - Aim: A vast array of possibilities.
SOTD: Superstitious - Stevie Wonder
Do Now: How do you declare/use arrays in java?
   datatype[] = new datatype[size];
   
   PATH - Location of known executable files
   echo $PATH - Prints out PATH variable in terminal
   which emacs - Prints out path where emacs is
   
   Errors: segmentation fault or a bus fault

   C does not provide any extra functions. You need to include the libraries 
   in order to use the functions in those libraries.
   
   Usual libraries to include
   #include <stdio.h>
   #include <stdlib.h>
   	<> indicates the library is in one of the normal places where C
   	libraries are.

   #include "mylib.h"
   	"" are used for libraries that you wrote.

   printf("bob = %f\n", bob);
   	%f is the placeholder for where bob will appear.
	
   printf() --> function for printing to the screen.
   	f stands for format

	If you want to print variables, you must include formatting placeholders
	in the string argument
	   int i = 5
	   printf("i is %d", i)

	   Type	     Formatting Character
	   int	     %d
	   long	     %ld
	   float     %f
	   double    %lf
	   	     %0
	   char	     %c
	   char array %s
	   pointer    %p

9/19 - Aim: What's the point of it all?
SOTD: Hunger Strike - Temple of the Dog

Memory Management
    Memory allocation either happens at compile time or at run time (dynamic).
    	Ex) using "new" in java was dynamic memory allocation
	Compile Time --> Stack memory
	Run Time --> Heap memory
    Compiler Allocated Memory
    	Packaged with the binary of the program
	*There is no standard default value*
	Variables and arrays are allocated here
	    Ex. float a    int b[5] --> Arrays in C is stack based and cannot
	    	      	       	    	be resized.
*Test your work on lab computers --> They are the middle ground
    Arrays
	Are not dynamic
	Must have a fixed size
	There is no length function
	There is no boundary checking
	    Ex: int fred         int a[10]
	    	   [ ]   [ ]   [ ]   [ ]   [ ] ...

