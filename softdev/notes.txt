
if __name__ == "__main__":
   print "LOADING AS MAIN"
else:
   print "LOADING AS MODULE"

git checkout --> takes away changes until last commit

virtualenv pd7en
cd bin
source activate
pip install flask

9/22
Make default app.py

Route	     call this function
/home	     home()
/about	     about()

app.py
from flask import Flask

app = Flask(__name__), render_template

@app.route("/about")
def about():
    return render_template("about.html")

@app.route("/about")
def about():
    page = """
    <h1>About</h1>
<hr>
<ol>
<li>Fred Flintstone</li>
<li>Mr. T</li>
<li>The Hulk</li>
</ol>
"""
    return page

@app.route("/home") --> if you go to path home, run this function)
@app.route("/")
def home():
    return "<h1>Hello World</h1>"

@app.route("/lucky")
def lucky():
    import random
    number = random.randrange(1, 100)
    return "Lucky Number: %d"%(number)

if __name__ == "__main__":
    app.debug = True;
    app.run(host = '0.0.0.0', port = 8000)
    #127.0.0.1 --> private address to use
    

You would run this program on localhost:8000/home
""" -->multiline string
"""

Web templates are used to create the HTML.

def lucky():
    import random
    n = random.randrange(1, 100)
    return render_template("lucky.html", number = n)

lucky.html file:
<!DOCTYPE HTML>
<h1>Lucky Number</h1>
<h2>Your Lucky Number is {{number}}</h2>
 -n will replace number in the HTML file.

Dictionaries:
    d = {}
    d[10] = "hello"
    d['one'] = 12345
    d['two'] = "Something"
    can also be initialized with values
    d = {'one': hello, 'two': 12345}
    Mutable

{10:'hello', 'one': 12345, 'two' = "Something"}
    d.has_key() - checks if a key exists
    d.keys() - returns all the keys

You can access the variables using d[key] or d.key
You can also print out the dictionary itself
Now, instead of using {{variable}}, you will be able to use {{d[variable]}} in
the template.

Lists:
    a = [10, 20, 'thirty', 40, 'fifty']
    You can return char in string by a[index] or multiple by a[startind:endind]

You can also run loops
    Ex)<ul>
	 {% for item in l %}
    	 <li>{{item}}</li>
	 {% endfor %}
       </ul>

@app.route("/profile/<lastname>")
def profile(lastname=""):

================================================================================
9/28
If you make a directory called static, you can load things from that folder
   ex) <img src="/static/thiuffy.png>

GET Request
    <form>
	name: <input type="text" name = "name">
	age: <input type="text" name = "age">
	<input type="submit" name="button" value="ok">
	<input type="submit" name="button" value="cancel">
    </form>

import request
def index():
    print request.__dict__ //prints out dictionary of request
    print request.args //returns an immutable dictionary with all the args.
{% for a in args %}
   
{% endfor %}

   request.args.get(index)

   However, GET is insecure and may run out of space.
   Most web api's usually use GET

POST Request
    <form method="POST">>
        uname: <input type="text" name = "<username">
	password: <input type="text" name = "pasword">
	<input type="submit" name="button" value="login">
	<input type="submit" name="button" value="cancel">
    </form> 

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method=="GET":
        return render_template("login.html")
    else:
	//print request.args
	
	<h1>Logging in</h1>
//GET goes into args index, POST goes into form index
      ex) print request.form['username']
      ex) print request.form['username']
      ex) print request.form['username']
      
To authenticate, you can make a module called utils.py and put authenticate
function in it.

Object Oriented programming is based on states, while functional programming
is based on constant changing states.

To keep track of the user, use the hidden tag in the form
   Hidden code --> the same code goes back and forth to track user.
   Cookies --> Browser tells what goes where, only sends to that particular site
   	       Will always be encrypted.

Session --> Python object that works as a dictionary to keep track of cookies
import session from flask

if __name__ == "__main__":
   app.debug = True
   app.secret_key = "Don't store this on github for security"

@app.route("/inc")
def inc():
    if 'n' not in session:
       session['n'] = 0
    n = session['n']
    n = n + 1
    session['n'] = n
    return render_template("counter.html", n = n) 

There is a redirect you can import
import redirect, url_for
@app.route("/reset")
def reser():
    session['n'] = 0
    return redirect("/inc")
    return redirect(url_for("/inc"))

Look at classcode for more detail.

ASSIGNMENT
About page - open to everybody
Secret page - you can only see if you are logged in. if not, redirect ito login
       	      page
Login page - login page to access secret page
Logout - redirect to login page.

f = open("data.dat", "w")
f.write("Hello\n")
f.write("World\n")
f.close()
f = open("data.dat", "r")
s = f.read()
s = f.readline()

import shelve
d = shelve.open("shelf.dat")
shelve must only have strings as keys, unlike dictionaries

Locking
    You can have as many readers as you want, but when you are writing, you want
    to lock.

Flask Shelve
    Install using pip install Flask-Shelve


in base.html:
{% block head %}
{% endblock head %}

{% block body %}
{% endblock body %}

{% block foot %}
{% endblock foot %}

in index.html:

{% extends "base.html" %}
{% block body %}
<h1>
whatever you want to put in
</h1>
{% endblock body %}

in stufftoinclude.html:
<h3>this stuff is included</h3>

in include.html:
{% include "stufftoinclude.html" %}

from flask import markup
Markup(l) --> tells

{{list | safe}}

10/5
Relational Databases
    Student		Teacher		    Course		
    ID    Name		ID    Name	    ID    Name
    1	  Yasmeen	1     Brown	    1	  APCS
    2	  Max		2     K		    2	  Precalc
    3	  Daisy		3     C		    3	  H Precalc
    4	  Sam		4     DW	    4	  Intro CS
    5	  Mary		5     Z		    5	  BC Calc
    6	  Thluffy

    SID		TID	    CID	        Term	     Grade
    2		4	    4		2012	     98
    2		3	    5		2014	     65
    6		3	    5		2014	     55
    5		2	    1		2014	     95

    Query (Student, Name)
    Query (Trans, SID, Term)
    etc...

    Structured Query Language
    SQL (aka Sequal)

    Oracle, Sybase, IBM DB2





10/6
Postgresql - Yes transactions, but slower
mysql - No transactions, but faster

SQLite - Does SQL as a library.

.open doughnutstore.db
.tables
CREATE TABLE doughnuts (name TEXT, price REAL, qty INTEGER);
INSERT INTO doughnuts VALUES ("jelly",2.50,10);
.schema
.dump
.close
.open doughnutstore.db
DROP TABLE doughnuts
.read doughbuts.sql

Can be lowecase, but tradition is uppercase

.read doughnuts.sql
SELECT * FROM doughnuts;
SELECT name,price FROM doughnuts;
SELECT * FROM doughnuts where name = 'chocolate';
SELECT * FROM doughnuts where name like '%c';
SELECT * FROM doughbuts where qty < 10;
etc...

rowid - id of a row

delete from doughnuts where rowid > 6;

INSERT, SELECT, DELETE

update doughnuts set qty=qty-1 where name="chocolate";





10/7
select name from people,doughnuts;
Error: ambiguous column name: name --> name is in both people and doughnuts

select people.name,doughnuts.name from people,doughnuts;
       Joins name of people and name of doughnuts, each person gets a doughnut

select people.name,doughnuts.name from people,doughnuts where doughnuts.name="glazes" and age < 10;

select * from people, classes where people.id = 6
We know 6 is in people id, but not in the classes.
So, we do
select * from people, classes where people.id = classes.id
This will match each student to his/her class
order by grade - orders by grade

How sql is misused:
In blogs, a gigantic table would be used where comments would be under the post
tables.
However, by separating the users, posts, and comments into different tables,
with connections to each other, it would make things more efficient.

Index fields to expidite searches.
Balanced search tree, log(n) performance.
You can have multiple indices.

2-3 trees, only data in leaves. Every node has 2 or 3 children, or a leaf.

B Tree - Like a 2-3 tree, but every node has 511 or 512 children, or a leaf.




10/8
strip() - gets rid of whitespace or other characters
python has a csv module

csv-demo.py

import csv

def csv_list():
    reader = csv.reader(open("people.csv"))
    for item in reader:
    	print item
    	print item[0]

%s in a string - string substitute
ex) "something %s, something %s, something" % ("hello", "world")

%s - string
%i - integer
%f - floating point

%5s - leave five spaces befire the string

def csv_dict():
    reader = csv.DictReader(open("people.csv"))
    TEMPLATE="name: %(name)s, age: %(age)s, id: %(id)s"
    for item in reader:
        print item
        print TEMPLATE%(item)

You can use %(name) with the dictionary. Will take value from dictionary with
key 'name'

import sqlite3
conn = sqlite.connect("demo.db")
c = conn.cursor()

q = "create table people (name text, age integer, id integer)"
c.execute(q)

conn.commit() - When you do an insert, you must run this

10/9



10/20
Nosql:
    Schemaless
    Low cost of entry

One we will be using: Mongodb

sql:			Mongodb:
server			server
database		database
tables			collections
record			document

show dbs -> shows databases
use pd7 -> opens database
db.dropDatabase() -> drops db

BSON and JSON objects
x = {"name": "Tom", "age": 20}
  You dont have to put the quotes around the keys.
  You can access variables using [] or . notation.
  You can add things too.

db.people.insert(x)
db.people.insert({name: 'Sue', age: 40})
db.find()
Object IDs (hash codes) are associated with each colection.
show collections --> shows the collections in the db
db.system.indexes.find() --> finds the indexes in the db.

You can also create a list of items
    l = [{name: "Allen", age: 44}, {name: "Zeke", age: 55}]
    You can now do things like
    l[1][age], etc
    You can insert the whole list now
db.people.insert(l)

db.people.find({name: 'Sue'})
    Give the find function a piece of a dictionary we know, will return
db.people.find({age: 40}) --> returns people whose age is 40

Documentation on mongodb

db.people.remove() --> removes everyone

db.people.remove({name: "Tom})
db.people.insert(x)
db.people.remove({name: "Tom"}, {justOne:true})
    All the stuff you can do for find you can do here

db.people.update({'name': "Tom"}, {'age':30})
    finds what's in first
instead, do
db.people.update({'name': "Tom"}, {$set:{'age':41}})

upsert --> If search is possible, updates. If not, creates a new entry
    db.people.update({'name': "Tom"}, {$set:{'age':41}}, {upsert:true})
    Only updates one.

db.people.find().sort("age") --> sorts by age

update

db.people.find({'name': "Tom"}, {"_id":False}) --> Doesn't show id


10/22
connection = MongoClient()

from pymongo import MongoClient

#For security
db.connection.admin
db.authenticate("username", "password")

#From command line: use pd7
db = connection['pd7']

#from command line: show collections
print db.collection_names()

#We can drop a collection using db.collection.drop

#exactly analagous to doing it from the command line
db.people.insert(d)

res = db.people.find()
print res

Object mappers

11/2
Getting Data from Websites
You could download data as CSV files, but you might not always want static
data.
curl - opening web socket to get data from a website.
screenscraping - Getting data from a website. Will break when website
	       	 changes internally.

import urllib2, json
from bs4 import BeautifulSoup

url="http://www.nytimes.com"
request = urllib2.urlopen(url)
result = request.lib()
soup = BeautifulSoup(result, 'html.parser')
for r in soup.find_all("h2"):
    print r

Use APIs to get dynamic data -- ex) openweathermap

11/4
GIL - Global Interpreter Lock
Green Unicorn - Allows for multiple users to use it.
Put secret key outside.
gunicorn -w 4 -b 0.0.0.0:8000 app:app

import urllib2
import json
r = json.loads(result)
Converts into a python dictionary.

11/5
Postman extension
Programmableweb.com --> API database

11/12
STEP 1:
    Always read the README.
    Changes - Changelog file --> Time/Date, etc.
        No real need for this, because of commit messages.
    Todo file - Roadmap moving ahead.
    
STEP 2: CONVENTIONS!
     Look at the directory structure 
     Look at filenames
     Keep conventions (app.py, static, templates, etc)
     utils.py --> file for small utility functions.
     You want to have logical groupings.

C Program
/*------------------- mod.c ---------------------*/
/*
    Description of the modile
    
    void f1(int x) - brief description of function f1
    
    void f2(int a, int b) - brief description of function f2
*/

/*-----------------includes--------------------*/
#include <stdio.h>

/*----------------defines-------------------*/
#define MYVAL 1

11/13
PEP - Python Enhancement Proposal
PEP 0008 - Coding standard for python
pycco
pydoc - Like javadoc
epydoc --html mod -> Pip install

sphinx --> pip install
run sphinx-quickstart

11/16
WHo played spiderman?

STEP 1:
Query

STEP 2:
Get a billion web pages with the query words

STEP 3:
Extract text

STEP 4:
Analyze the text
EX) Who --> means that we are looking for names
    	Look for 2 capital words with space in between
	Title (Mr., Ms., Dr.)
	List of popular first names
    Where
    When

Do this using regular expressions.

STEP 5:
Number of documents the name appeared in.
