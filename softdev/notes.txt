if __name__ == "__main__":
   print "LOADING AS MAIN"
else:
   print "LOADING AS MODULE"

git checkout --> takes away changes until last commit

virtualenv pd7en
cd bin
source activate
pip install flask

9/22
Make default app.py

Route	     call this function
/home	     home()
/about	     about()

app.py
from flask import Flask

app = Flask(__name__), render_template

@app.route("/about")
def about():
    return render_template("about.html")

@app.route("/about")
def about():
    page = """
    <h1>About</h1>
<hr>
<ol>
<li>Fred Flintstone</li>
<li>Mr. T</li>
<li>The Hulk</li>
</ol>
"""
    return page

@app.route("/home") --> if you go to path home, run this function)
@app.route("/")
def home():
    return "<h1>Hello World</h1>"

@app.route("/lucky")
def lucky():
    import random
    number = random.randrange(1, 100)
    return "Lucky Number: %d"%(number)

if __name__ == "__main__":
    app.debug = True;
    app.run(host = '0.0.0.0', port = 8000)
    #127.0.0.1 --> private address to use
    

You would run this program on localhost:8000/home
""" -->multiline string
"""

Web templates are used to create the HTML.

def lucky():
    import random
    n = random.randrange(1, 100)
    return render_template("lucky.html", number = n)

lucky.html file:
<!DOCTYPE HTML>
<h1>Lucky Number</h1>
<h2>Your Lucky Number is {{number}}</h2>
 -n will replace number in the HTML file.

Dictionaries:
    d = {}
    d[10] = "hello"
    d['one'] = 12345
    d['two'] = "Something"
    can also be initialized with values
    d = {'one': hello, 'two': 12345}
    Mutable

{10:'hello', 'one': 12345, 'two' = "Something"}
    d.has_key() - checks if a key exists
    d.keys() - returns all the keys

You can access the variables using d[key] or d.key
You can also print out the dictionary itself
Now, instead of using {{variable}}, you will be able to use {{d[variable]}} in
the template.

Lists:
    a = [10, 20, 'thirty', 40, 'fifty']
    You can return char in string by a[index] or multiple by a[startind:endind]

You can also run loops
    Ex)<ul>
	 {% for item in l %}
    	 <li>{{item}}</li>
	 {% endfor %}
       </ul>

@app.route("/profile/<lastname>")
def profile(lastname=""):

================================================================================
9/28
If you make a directory called static, you can load things from that folder
   ex) <img src="/static/thiuffy.png>

GET Request
    <form>
	name: <input type="text" name = "name">
	age: <input type="text" name = "age">
	<input type="submit" name="button" value="ok">
	<input type="submit" name="button" value="cancel">
    </form>

import request
def index():
    print request.__dict__ //prints out dictionary of request
    print request.args //returns an immutable dictionary with all the args.
{% for a in args %}
   
{% endfor %}

   request.args.get(index)

   However, GET is insecure and may run out of space.
   Most web api's usually use GET

POST Request
    <form method="POST">>
        uname: <input type="text" name = "<username">
	password: <input type="text" name = "pasword">
	<input type="submit" name="button" value="login">
	<input type="submit" name="button" value="cancel">
    </form> 

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method=="GET":
        return render_template("login.html")
    else:
	//print request.args
	
	<h1>Logging in</h1>
//GET goes into args index, POST goes into form index
      ex) print request.form['username']
      ex) print request.form['username']
      ex) print request.form['username']
      
To authenticate, you can make a module called utils.py and put authenticate
function in it.

Object Oriented programming is based on states, while functional programming
is based on constant changing states.

To keep track of the user, use the hidden tag in the form
   Hidden code --> the same code goes back and forth to track user.
   Cookies --> Browser tells what goes where, only sends to that particular site
   	       Will always be encrypted.

Session --> Python object that works as a dictionary to keep track of cookies
import session from flask

if __name__ == "__main__":
   app.debug = True
   app.secret_key = "Don't store this on github for security"

@app.route("/inc")
def inc():
    if 'n' not in session:
       session['n'] = 0
    n = session['n']
    n = n + 1
    session['n'] = n
    return render_template("counter.html", n = n) 

There is a redirect you can import
import redirect, url_for
@app.route("/reset")
def reser():
    session['n'] = 0
    return redirect("/inc")
    return redirect(url_for("/inc"))

Look at classcode for more detail.

ASSIGNMENT
About page - open to everybody
Secret page - you can only see if you are logged in. if not, redirect ito login
       	      page
Login page - login page to access secret page
Logout - redirect to login page.

f = open("data.dat", "w")
f.write("Hello\n")
f.write("World\n")
f.close()
f = open("data.dat", "r")
s = f.read()
s = f.readline()

import shelve
d = shelve.open("shelf.dat")
shelve must only have strings as keys, unlike dictionaries
